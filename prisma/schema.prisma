datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

// ----------------------------
// ENUMs
// ----------------------------
enum NodeStatus {
  active
  archive
}

enum EventStatus {
  draft
  published
  completed
}

enum TicketStatus {
  available
  reserved
  sold
}

enum TransactionStatus {
  created
  pending
  paid
  canceled
}

enum TransactionDirection {
  deposit
  withdraw
}

// ----------------------------
// Core
// ----------------------------
model Node {
  id                String              @id @default(uuid()) @db.Uuid
  name              String              @db.Text
  slug              String              @unique
  status            NodeStatus
  commission        Decimal             @db.Decimal(5, 2)
  created_at        DateTime?
  main_organizer_id Int?

  // relations
  events            Event[]
  adminUsers        AdminUser[]
  userNodes         UserNodes[]
  tickets           Ticket[]
  transactions      Transaction[]
  purchaseItems     PurchaseItem[]
  organizerBalances OrganizerBalance[]

  @@map("Nodes")
}

model User {
  id                    Int                 @id @default(autoincrement())
  email                 String              @unique @db.Text
  password_hash         String              @db.Text
  name                  String              @db.Text
  phone_number          String?             @db.VarChar(20)
  is_active             Boolean             @default(true)
  registration_date     DateTime?
  external_provider_id  String?             @db.Text
  reset_token           String?             @db.Text
  reset_token_exp       DateTime?
  verification_code     String?             @db.Text
  verification_code_exp DateTime?

  // relations
  userNodes             UserNodes[]
  tickets_bought        Ticket[]            @relation("TicketBuyer")
  recommendedEvents     RecommendedEvent[]
  transactions          Transaction[]

  @@map("Users")
}

// M2M (User ↔ Node)
model UserNodes {
  user_id Int
  node_id String @db.Uuid

  // relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  node Node @relation(fields: [node_id], references: [id], onDelete: Cascade)

  @@id([user_id, node_id])
  @@map("UserNodes")
}

model AdminUser {
  id            Int     @id @default(autoincrement())
  email         String? @db.Text
  password_hash String? @db.Text
  role          String  @default("default") @db.VarChar(255)
  node_id       String  @db.Uuid
  user_hash     String? @db.Text
  is_docs_verif Boolean?
  status        String? @db.Text

  // relations
  node Node @relation(fields: [node_id], references: [id], onDelete: Cascade)

  @@map("AdminUsers")
}

// ----------------------------
// Dictionaries
// ----------------------------
model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  // relations
  eventGenres EventGenre[]

  @@map("Genres")
}

model City {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(100)
  // back relation to Event.city
  events Event[]

  @@map("Cities")
}

model Currency {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(10)

  // relations
  events        Event[]
  tickets       Ticket[]
  transactions  Transaction[]
  orgBalances   OrganizerBalance[]

  @@map("Currencies")
}

// ----------------------------
// Media
// ----------------------------
model File {
  id           String   @id @default(uuid()) @db.Uuid
  bucket       String   @db.Text
  filename     String   @unique @db.Text
  originalname String   @db.Text
  created_at   DateTime?
  size         Int

  // relations
  eventPhotos EventPhoto[]

  @@map("Files")
}

// ----------------------------
// Events
// ----------------------------
model Event {
  id                Int                @id @default(autoincrement())
  node_id           String             @db.Uuid
  name              String             @db.VarChar(255)
  status            EventStatus
  description       String?            @db.Text
  date_start        DateTime
  date_end          DateTime
  location          String?            @db.VarChar(255)
  address           String?            @db.Text
  city_id           Int?
  tickets_prices    Decimal            @default(0) @db.Decimal(10, 2)
  tickets_total     Int                @default(0)
  tickets_available Int                @default(0)
  last_edit         DateTime?          @db.Timestamptz
  currency_id       Int

  // relations
  node         Node        @relation(fields: [node_id], references: [id], onDelete: Cascade)
  city         City?       @relation(fields: [city_id], references: [id])
  currency     Currency    @relation(fields: [currency_id], references: [id])
  eventGenres  EventGenre[]
  photos       EventPhoto[]
  tickets      Ticket[]
  recs         RecommendedEvent[]
  transactions Transaction[]

  @@map("Events")
}

model EventGenre {
  event_id Int
  genre_id Int

  // relations
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([event_id, genre_id])
  @@map("EventGenres")
}

model EventPhoto {
  id       Int     @id @default(autoincrement())
  event_id Int
  file_id  String  @db.Uuid
  location String? @db.VarChar(100)

  // relations
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  file  File  @relation(fields: [file_id], references: [id], onDelete: Cascade)

  @@map("EventPhotos")
}

// ----------------------------
// Tickets & Recs
// ----------------------------
model Ticket {
  id            Int       @id @default(autoincrement())
  event_id      Int
  buyer_user_id Int?
  node_id       String    @db.Uuid
  created_at    DateTime  @default(now())
  price         Decimal   @db.Decimal(10, 2)
  currency_id   Int
  status        TicketStatus
  description   String?   @db.Text

  // relations
  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  buyer_user User?    @relation("TicketBuyer", fields: [buyer_user_id], references: [id])
  node       Node     @relation(fields: [node_id], references: [id], onDelete: Cascade)
  currency   Currency @relation(fields: [currency_id], references: [id])
  items      PurchaseItem[]

  @@map("Tickets")
}

model RecommendedEvent {
  id         Int      @id @default(autoincrement())
  event_id   Int
  user_id    Int?
  weight     Float    @default(1.0)
  created_at DateTime @default(now())

  // relations
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [user_id], references: [id])

  @@unique([event_id, user_id])
  @@map("RecommendedEvents")
}

// ----------------------------
// Finance
// ----------------------------
model Transaction {
  id                Int                 @id @default(autoincrement())
  node_id           String              @db.Uuid
  user_id           Int
  event_id          Int?
  status            TransactionStatus
  direction         TransactionDirection
  amount            Decimal             @db.Decimal(10, 2)
  currency_id       Int
  request_date      DateTime?
  payment_system_id String?             @db.Text

  // relations
  node      Node      @relation(fields: [node_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [id])
  event     Event?    @relation(fields: [event_id], references: [id])
  currency  Currency  @relation(fields: [currency_id], references: [id])
  items     PurchaseItem[]

  @@map("Transactions")
}

model PurchaseItem {
  id             Int      @id @default(autoincrement())
  node_id        String   @db.Uuid
  transaction_id Int
  ticket_id      Int
  is_used        Boolean  @default(false)
  qr_token       String   @unique @db.Text
  validated_at   DateTime?

  // relations
  node        Node        @relation(fields: [node_id], references: [id], onDelete: Cascade)
  transaction Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  ticket      Ticket      @relation(fields: [ticket_id], references: [id])

  @@map("PurchaseItems")
}

// ----------------------------
// Organizers (минимальный каркас, нужен для FK в OrganizerBalances)
// ----------------------------
model Organizer {
  id                Int                 @id @default(autoincrement())
  organizerBalances OrganizerBalance[]

  @@map("Organizers")
}

model OrganizerBalance {
  id              Int      @id @default(autoincrement())
  organizer_id    Int
  node_id         String   @db.Uuid
  currency_id     Int
  active_balance  Decimal  @db.Decimal(10, 2)
  pending_balance Decimal  @db.Decimal(10, 2)
  created_at      DateTime?
  activation_date DateTime?
  updated_at      DateTime?

  // relations
  organizer Organizer @relation(fields: [organizer_id], references: [id], onDelete: Cascade)
  node      Node      @relation(fields: [node_id], references: [id], onDelete: Cascade)
  currency  Currency  @relation(fields: [currency_id], references: [id])

  @@map("OrganizerBalances")
}
