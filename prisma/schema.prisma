datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x", "linux-arm64-openssl-3.0.x"]
}

model User {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  registration_date DateTime           @default(now())
  email             String?            @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  phone_number      String?            @db.VarChar(20)
  is_active         Boolean            @default(true)
  reset_token       String?
  reset_token_exp   DateTime?
  verification_code String?
  verification_code_exp DateTime?
  transactions      Transaction[]
  tickets           Ticket[]
  dealsAsBuyer      Deal[]             @relation("BuyerDeals")
  dealsAsSeller     Deal[]             @relation("SellerDeals")
  RecommendedEvent  RecommendedEvent[]
  UserBalance       UserBalance[]
}

model Event {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  status            EventStatus        @default(coming)
  genre             String?            @db.VarChar(100)
  tickets_available Int                @default(0)
  tickets_sold      Int                @default(0)
  event_date        DateTime
  location          String?            @db.VarChar(255)
  description       String?            @db.Text
  photos            EventPhoto[]
  tickets           Ticket[]
  deals             Deal[]
  recommendations   RecommendedEvent[]
}

model Transaction {
  id               Int                  @id @default(autoincrement())
  user_id          Int
  direction        TransactionDirection
  amount           Decimal              @db.Decimal(10, 2)
  transaction_date DateTime             @default(now())
  status           TransactionStatus    @default(created)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Ticket {
  id          Int          @id @default(autoincrement())
  user_id     Int
  buyer_id    Int?
  event_id    Int
  upload_date DateTime     @default(now())
  image       String?      @db.VarChar(255)
  status      TicketStatus @default(available)
  is_verified Boolean      @default(false)
  price       Decimal      @db.Decimal(10, 2)
  description String?
  deal        DealTicket?

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

model Deal {
  id        Int          @id @default(autoincrement())
  event_id  Int
  buyer_id  Int
  seller_id Int
  deal_date DateTime     @default(now())
  status    DealStatus   @default(in_progress)
  price     Decimal      @db.Decimal(10, 2)
  tickets   DealTicket[]

  event  Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  buyer  User  @relation("BuyerDeals", fields: [buyer_id], references: [id], onDelete: Cascade)
  seller User  @relation("SellerDeals", fields: [seller_id], references: [id], onDelete: Cascade)
}

model EventPhoto {
  id       Int    @id @default(autoincrement())
  event_id Int
  file_id  String

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  file  File  @relation(fields: [file_id], references: [id], onDelete: Cascade)
}

model DealTicket {
  id        Int @id @default(autoincrement())
  deal_id   Int
  ticket_id Int @unique

  deal   Deal   @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  ticket Ticket @relation(fields: [ticket_id], references: [id])
}

model RecommendedEvent {
  id         Int      @id @default(autoincrement())
  event_id   Int
  user_id    Int?
  weight     Float    @default(1.0)
  created_at DateTime @default(now())

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
}

model File {
  id           String       @id @default(uuid())
  bucket       String
  fileName     String       @unique
  originalName String
  createdAt    DateTime     @default(now())
  size         Int
  eventPhotos  EventPhoto[]
}

model UserBalance {
  id              Int      @id @default(autoincrement())
  user_id         Int
  active_balance  Decimal  @db.Decimal(10, 2)
  pending_balance Decimal  @db.Decimal(10, 2)
  activation_date DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum EventStatus {
  coming
  completed
}

enum TransactionDirection {
  deposit
  withdraw
}

enum TransactionStatus {
  created
  in_process
  completed
}

enum TicketStatus {
  available
  sold
  reserved
}

enum DealStatus {
  in_progress
  completed
  declined
}
